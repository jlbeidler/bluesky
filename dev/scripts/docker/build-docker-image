#!/usr/bin/env python3

__author__ = "Joel Dubowy"

import argparse
import logging
import os
import re
import subprocess
import sys
import traceback

try:
    from bluesky import  __version__
except:
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../../../'))
    sys.path.insert(0, root_dir)
    from bluesky import __version__


EXAMPLES_STR = """
Examples:
  $ ./dev/scripts/docker/build-docker-image.py
  $ ./dev/scripts/docker/build-docker-image.py
 """

REPO_ROOT_DIR = os.path.abspath(os.path.join(__file__, '../../../..'))

FINAL_INSTRUCTIONS = """
    To upload:
""".format(version=__version__)

def exit_with_msg(msg, exit_code=1):
    """Prints message and exits
    """
    sys.stderr.write("\n%s\n\n" % (msg))
    sys.exit(exit_code)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--version',
        help="Tagged version to build. User prompted if not specified.")
    parser.add_argument('-u', '--upload', action="store_true",
        help="Skip prompt to upload to docker hub and automatically upload")
    # TODO: add back option to override image name to use instead of 'bluesky' ?
    #    (This option was removed because I never used it)
    parser.epilog = EXAMPLES_STR
    parser.formatter_class = argparse.RawTextHelpFormatter
    return parser.parse_args()

def _call(cmd_args, capture_output=False):
    sys.stdout.write("Calling '{}'\n".format(' '.join(cmd_args)))
    # 'capture_output' isn't supported by subprocess in py3.5, so, specify stdin and stdout directly
    #r = subprocess.run(cmd_args, capture_output=capture_output, universal_newlines=True)
    kwargs = dict(stdout=subprocess.PIPE, stderr=subprocess.PIPE) if capture_output else dict()
    r = subprocess.run(cmd_args, universal_newlines=True, **kwargs)

    if r.returncode:
        msg = "Command '{}' returned error code {}. STDERR: {}".format(
            ' '.join(cmd_args), r.returncode, r.stderr)
        exit_with_msg(msg, exit_code=r)

    return r

def get_tag(args):
    if args.version:
        if not re.compile('^v\d+\.\d+\.\d+$').match(args.version):
            exit_with_msg("Invalid tag version: {}\n".format(args.version))
        tag_version = args.version

    else:
        tag_version = None
        while not tag_version or not re.compile('^v\d+\.\d+\.\d+$').match(tag_version):
            if tag_version:
                sys.stdout.write("Enter a tag version of the form 'v{}' or press"
                    " enter to use the default\n".format(__version__))
            sys.stdout.write('Tag version [v{}]: '.format(__version__))
            tag_version = input().strip() or 'v' + __version__

    return tag_version

def build(tag_version):
    dockerfile_pathname = os.path.join(REPO_ROOT_DIR, 'Dockerfile')
    _call(['docker','build', '-t', 'bluesky:{}'.format(tag_version), REPO_ROOT_DIR])

def tag(tag_version):
    _call(['docker', 'tag', 'bluesky:{}'.format(tag_version), 'pnwairfire/bluesky:latest'])
    _call(['docker', 'tag', 'bluesky:{}'.format(tag_version), 'pnwairfire/bluesky:' + tag_version])
    return tag_version

def upload(args, tag_version):
    def _prompt():
        sys.stdout.write('Upload to hub.docker.com?: [y/N]: ')
        r = input().strip()
        return r and r.lower() in ('y', 'yes')

    if args.upload or _prompt():
        sys.stdout.write("Pushing to docker hub.\n")
        # we want prompt to go to stdout, so that user knows to
        # enter usernameand password.
        _call(['docker', 'login'])
        _call(['docker', 'push', 'pnwairfire/bluesky:latest'])
        _call(['docker', 'push', 'pnwairfire/bluesky:' + tag_version])
        _call(['docker', 'logout'])

class tag_checkout_handler(object):
    """Context handler that
        1. records currently checked out commit
        2. checks out specified tag version on enter
        3. checks out originally checked out commit on exit
    """

    def __init__(self, tag_version):
        # `git symbolic-ref HEAD` works in 2.17 but not 2.7
        # self._original_branch = _call(['git', 'symbolic-ref', 'HEAD'], capture_output=True).stdout
        self._original_branch = _call(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], capture_output=True).stdout
        if not self._original_branch or self._original_branch == 'HEAD':
            exit_with_msg("In a detached state. Check out a branch.")

        self._original_branch = self._original_branch.replace('refs/heads/', '').strip()
        self._needs_stash = not not _call(['git', 'status', '--porcelain', '-uno'], capture_output=True).stdout
        self._tag_version = tag_version

    def __enter__(self):
        if self._needs_stash:
            _call(['git', 'stash'])
        _call(['git', 'checkout', self._tag_version])

    def __exit__(self, exc_type, exc_value, traceback):
        _call(['git', 'checkout', self._original_branch])
        if self._needs_stash:
            _call(['git', 'stash', 'pop'])


if __name__ == "__main__":
    args = parse_args()
    tag_version = get_tag(args)
    with tag_checkout_handler(tag_version):
        build(tag_version)
        tag(tag_version)
        upload(args, tag_version)
