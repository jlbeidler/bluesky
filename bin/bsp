#!/usr/bin/env python3

"""bsp: Runs BlueSky

Example calls:
 > bsp -i fires-before.json -o fires-after.json
 > cat fires-before.json | bsp > fires-after.json
 > bsp < fires-before.json > fires-after.json
"""

import datetime
import fcntl
import json
import logging
import os
import sys
import traceback

from afscripting import args as scripting_args
from afscripting.utils import exit_with_msg
from pyairfire import process

try:
    from bluesky import (
        datetimeutils, exceptions,
        modules, models, __version__
    )
    from bluesky.config import Config
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky import (
        datetimeutils, exceptions,
        modules, models, __version__
    )
    from bluesky.config import Config

__author__ = "Joel Dubowy"

REQUIRED_ARGS = []

OPTIONAL_ARGS = [
    {
        'short': '-i',
        'long': '--input-file',
        'dest': 'input_files',
        'help': 'input file(s) containing JSON formatted fire data',
        'action': "append",
        'default': []
    },
    {
        'short': '-n',
        'long': '--no-input',
        'help': 'tells bsp not to expect -i or piped input',
        'action': "store_true",
        'default': False
    },
    {
        'long': '--skip-failed-input-files',
        'help': 'Ignore any input files that are missing, invalid, etc.',
        'action': "store_true",
        'default': False
    },
    {
        'short': '-o',
        'long': '--output-file',
        'dest': 'output_file',
        'help': 'output file comtaining JSON formatted fire data',
        'action': "store",
        'default': None
    },
    {
        'long': '--compress',
        'help': 'Compress output (gzip)',
        'action': "store_true",
        'default': False
    },
    {
        'long': '--indent',
        'help': 'Format output json with newlines and given indent',
        'type': int
    },
    {
        'short': "-C",
        'long': '--config-option',
        'dest': 'config_options',
        'help': "Config option override, formatted like 'section.*.key=stringvalue'",
        'action': scripting_args.ConfigOptionAction
    },
    {
        'short': "-B",
        'long': '--boolean-config-option',
        'dest': 'config_options',
        'help': "Config option override, formatted like 'section.*.key=boolvalue'",
        'action': scripting_args.BooleanConfigOptionAction
    },
    {
        'short': "-I",
        'long': '--integer-config-option',
        'dest': 'config_options',
        'help': "Config option override, formatted like 'section.*.key=intvalue'",
        'action': scripting_args.IntegerConfigOptionAction
    },
    {
        'short': "-F",
        'long': '--float-config-option',
        'dest': 'config_options',
        'help': "Config option override, formatted like 'section.*.key=floatvalue'",
        'action': scripting_args.FloatConfigOptionAction
    },
    {
        'short': "-J",
        'long': '--json-config-option',
        'dest': 'config_options',
        'help': "Config option override supporting any json formatted value, formatted like 'section.*.key=jsonvalue'",
        'action': scripting_args.JSONConfigOptionAction
    },
    {
        'short': '-c',
        'long': '--config-file',
        'dest': 'config_file_options',
        'help': 'config file containing JSON formatted overrides for default config values',
        'action': scripting_args.create_config_file_action(
            ['run_config', 'config'])
    },
    {
        'long': '--dump-config',
        'action': 'store_true'
    },
    {
        #'short': "-v",
        'long': '--version',
        'dest': 'version',
        'action': 'store_true',
        'help': "Output bluesky package version and exit.",
        'default': False
    },
    {
        'long': '--run-id',
        'dest': 'run_id',
        'help': 'custom run id to use instead of generating a new GUID'
    },
    {
        'long': '--today',
        'help': ("What's considered the current day in the context of the "
            "run; defaults to current UTC day; used to replace config "
            "wildcards ('{today}', etc.)")
        # Note: not using scripting_args.ParseDatetimeAction because
        #  bsp supports things like '{today}', '{yesterday}', etc.
    }

]

POSITIONAL_ARGS = [
    {
        'long': 'module',
        'nargs': '*'
    }
]

# Note: the trailing space seems to be the only way to add an extra trailing line
EPILOG_STR = """\
Available Modules:

    {}

Input files:

    If multiple input files are specified, e.g.

      $ bsp -i input1.json -i input2.json

    fire data from the files will be concatenated, but any other data
    specified by more than one of the input files will be overwritten by
    the subsequent file(s).

Configuration:

    Config settings can be specified in separate config file(s) as well
    as via command line options.  Config files are loaded in the
    order they appear on the command line, with each subsequent files
    overriding any config parameters already set. Next, the comand line
    settings are applied in the order they are specified, overriding
    any config paramters already set.

    For example if config1.json specifies foo=bar and bar=1, and
    config2.json specifies foo=baz and baz=3, and if bsp is invoked like:

     $ bsp -i input.json -c config1.json -c config2.json

    then the net result is foo=baz, bar=1, baz=3.  If you add
    '-C foo=bsdf' to the command

     $ bsp -i input.json -c config1.json -c config2.json -C foo=bsdf

    then regardless of where it is specified in the command, foo
    will be 'bsdf', bar will remain 1, and baz will remain 3.

    Note that, with the exception of keys under
    visualization > hysplit > blueskykml, all keys in the
    configuration json data are case-insensitive.
 """.format('\n    '.join(modules.AVAILABLE_MODULES))

def is_piped_input():
    """Returns True if input data is piped into bsp

    TODO: Get this method working!

      All three of the following methods seem to work, but then falsely (?)
      indicate piped input when bsp is run using subprocess.check_output

      1) using sys.stdin.isatty:

        >>>  return not sys.stdin.isatty()

      2) using os.isattty:

        >>>  not os.isatty(sys.stdin.fileno())

      3) temporarily setting sys.stdin to non-blocking:

        >>>  fd = sys.stdin.fileno()
        >>>  fl = fcntl.fcntl(fd, fcntl.F_GETFL)
        >>>  fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
        >>>  r = False
        >>>  try:
        >>>      sys.stdin.seek(0)
        >>>      r = True
        >>>  except:
        >>>      pass
        >>>  finally:
        >>>      fcntl.fcntl(fd, fcntl.F_SETFL, fl | ~os.O_NONBLOCK)
        >>>  return r

      See http://stackoverflow.com/questions/33871836/find-out-if-there-is-input-from-a-pipe-or-not-in-python
      Other suggestions in the SO thread don't work for bsp's need.

      So, for now, this method just always returns False, and downstream code
      just ignores stdin if either '-i' or '-n' are specified
    """
    return False

##
## Args Parsing and Validation
##

def parse_args():
    """Parses args - required, optional, and positional

    Note: We're doing this manually, rather than call
    scripting_args.parse_args, because we want to be able
    to replace datetime format chars in the log file name
    (which is done after FiresManager.today is set).
    """
    parser = scripting_args.ArgumentParser()
    parser.epilog = EPILOG_STR
    parser.formatter_class = scripting_args.RawTextHelpFormatter
    scripting_args.add_arguments(parser, REQUIRED_ARGS, required=True)
    scripting_args.add_arguments(parser, OPTIONAL_ARGS)
    scripting_args.add_arguments(parser, POSITIONAL_ARGS)
    scripting_args.add_logging_options(parser)
    args = parser.parse_args()
    output_version(parser, args)
    validate_args(args)

    return args

def validate_args(args):
    # Only one of three input scenarios allowed at a time - 1) piped, 2) read
    # from file, 3) --no-input.  There's extra logic here to return error
    # messages specific to each bad combination
    is_po = is_piped_input()
    if is_po and args.no_input and args.input_files:
        exit_with_msg("Specify '-n'/'--no-input' or "
            "'-i'/'--input-file', or pipe input - not all three.")
    elif args.no_input and args.input_files:
        exit_with_msg("Options '-n'/'--no-input' and "
            "'-i'/'--input-file' can't be specified simultaneously")
    elif args.no_input and is_po:
        exit_with_msg("Option '-n'/'--no-input' can't be "
            "specified if there's piped input")
    elif args.input_files and is_po:
        exit_with_msg("Option '-i'/'--input-file' can't be "
            "specified if there's piped input")

    # TODO: validate other args values as necessary

def output_version(parser, args):
    if args.version:
        sys.stdout.write("bsp (bluesky) version {}\n".format(__version__))
        sys.exit(0)

##
## Setting up FiresManager
##

def replace_wildcards(args, val):
    if val:
        # replace '{run_id}' before filling in timestamps, since
        # --run-id may have been specified with a timestamp wildcard
        if args.run_id:
            val = val.replace('{run_id}', args.run_id)

        today = args.today
        if not today:
            today = datetimeutils.today_utc()
        elif hasattr(today, 'lower'):
            today = datetime.datetime.strptime(today, "%Y-%m-%d")

        val =  datetimeutils.fill_in_datetime_strings(val, today=today)

    return val

def configure_logging(args):
    args.log_file = replace_wildcards(args, args.log_file)
    # Note: The second argument to configure_logging_from_args
    #  is not used. It must be left over from a previous version
    #  of the function. So just pass in None.
    scripting_args.configure_logging_from_args(args, None)

def set_modules(args, fires_manager):
    # modules may be specified either in the input json or as command line
    # args, but not in both places
    if args.module:
        if fires_manager.modules:
            raise exceptions.BlueSkyInputError(
                "Modules to be run can't be specified both"
                " on the command line and in the input json")
        fires_manager.modules = args.module


def set_config(args, fires_manager):
    # TODO: uncomment/enable '-D'/'--contig-option' and merge the config
    #  values specified in args.config_options into config. First refactor
    #  that option to produce nested dict rather than a ConfigParser object
    #  object.  Make sure output json contains merged config (with tests)
    # TODO: uncomment/enable '-c'/'--config-file' option, load into
    #  ConfigParser object, convert that object into a dict, and merge that
    #  dict into config.  Make sure output json contains merged config
    #  (with tests)

    # merge loaded file options
    Config().merge(args.config_file_options)
    Config().merge(args.config_options)

    if args.dump_config:
        logging.info("Configuration:")
        # TODO: prune any config not relevant to modules specified
        sys.stdout.write(json.dumps(Config().get(),
            indent=args.indent, cls=models.fires.FireEncoder))
        sys.exit(0)

def setup(args):
    fires_manager = models.fires.FiresManager()
    # Set today and run id first of two times. Setting here so that
    # config data and intput file name wildcards are filled in correctly
    if args.today:
        fires_manager.today = args.today
    if args.run_id:
        fires_manager.run_id = args.run_id

    set_config(args, fires_manager)

    logging.summary("BlueSky v%s", __version__)
    # Log input file and output file in SUMMARY messages, and skip
    # them in scripting_args.output_args (which uses INFO level messages)
    logging.summary("Input File(s): %s", ', '.join(args.input_files))
    logging.summary("Output File: %s", args.output_file)
    scripting_args.output_args(args, skip=['input_file', 'output_file'])
    #afscripting.utils.log_config(args.config_options)

    # Note: Calling code handles exception
    if not args.no_input:

        at_least_one = False
        for f in args.input_files:
            try:
                fires_manager.loads(input_file=f, append_fires=True)
                at_least_one = True
            except Exception as e:
                msg = f'failed to load {f}: {e}'
                logging.error(msg)
                if args.skip_failed_input_files:
                    fires_manager.record_error(msg)
                else:
                    raise

        if not at_least_one:
            # This will only get hit is --skip-failed-input-files was used
            raise exceptions.BlueSkyInputError("No valid input files were loaded")

    set_modules(args, fires_manager)

    # If either run_id or today is defined in both the input file and in
    # args, what's in args should overwrite what's in the input file.
    # So, set both a second time, in case initial setting was overwriten
    # by one of the input files
    if args.today:
        fires_manager.today = args.today
    if args.run_id:
        fires_manager.run_id = args.run_id

    return fires_manager

##
## Main
##

def exit_with_traceback(e):
    logging.error(e)
    logging.debug(traceback.format_exc())
    exit_with_msg(e)

def main():
    args = parse_args()

    # configure logging as soon as possible, before any log messages
    configure_logging(args)

    try:
        fires_manager = setup(args)

        fires_manager.run()

    except exceptions.BlueSkyModuleError as e:
        # The error was added to fires_manager's meta data, and will be
        # included in the output data
        pass
    except Exception as e:
        exit_with_traceback(e)

    fires_manager.dumps(output_file=args.output_file, indent=args.indent,
        compress=args.compress)
    logging.summary("Run complete")

if __name__ == "__main__":
    main()
